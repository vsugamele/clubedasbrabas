
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://weuifmgjzkuppqqsoood.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndldWlmbWdqemt1cHBxcXNvb29kIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mjk3Njg1MDIsImV4cCI6MjA0NTM0NDUwMn0.iTyxWaZyFQc7qqR_O6Fofkd0Bf_D0Tpn_qMTA9XR98g";

// Configurações otimizadas para maior estabilidade
const clientOptions = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true
  },
  global: {
    headers: {
      'Cache-Control': 'no-store, no-cache, must-revalidate, proxy-revalidate',
      'Pragma': 'no-cache',
      'Expires': '0',
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10
    }
  }
  // Remove schema definition to avoid type errors
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  clientOptions
);

// Configure session behavior
supabase.auth.onAuthStateChange((event, session) => {
  // Define the event type as string to bypass TypeScript's strict checking
  const eventType: string = event;
  
  if (eventType === 'SIGNED_OUT' || eventType === 'USER_DELETED') {
    // Clear any cached data when signed out
    localStorage.removeItem('supabase.auth.token');
    console.log("User signed out, cleared auth cache");
  }
  
  if (eventType === 'SIGNED_IN' || eventType === 'TOKEN_REFRESHED') {
    console.log("Auth state changed:", event);
  }
});

// Função para verificar conectividade com o Supabase
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    // Tentativa 1: Verificar sessão
    try {
      const { data, error } = await supabase.auth.getSession();
      if (!error) return true;
    } catch (e) {
      console.warn("Falha ao verificar sessão:", e);
    }
    
    // Tentativa 2: Verificar tabela profiles
    try {
      const { error } = await supabase
        .from('profiles')
        .select('id', { count: 'exact', head: true })
        .limit(1);
      
      if (!error) return true;
    } catch (e) {
      console.warn("Falha ao verificar tabela profiles:", e);
    }
    
    // Tentativa 3: Verificar tabela categories
    try {
      const { error } = await supabase
        .from('categories')
        .select('id', { count: 'exact', head: true })
        .limit(1);
      
      if (!error) return true;
    } catch (e) {
      console.warn("Falha ao verificar tabela categories:", e);
    }
    
    return false;
  } catch (error) {
    console.error("Erro ao verificar conexão:", error);
    return false;
  }
};

// Add a request/response monitoring function to debug Supabase connectivity issues
const monitorConnectivity = () => {
  let lastSuccessfulRequest = Date.now();
  let failedRequests = 0;

  // Add a listener to detect network status changes
  window.addEventListener('online', () => {
    console.log("Browser reports online status");
    // Reset failed request counter when back online
    failedRequests = 0;
    toast.success("Conectado à internet", { id: "online-status" });
  });

  window.addEventListener('offline', () => {
    console.log("Browser reports offline status");
    toast.error("Conexão perdida. Você está offline.", { id: "offline-status" });
  });

  // Perform a simple heartbeat check periodically
  setInterval(async () => {
    if (navigator.onLine) {
      try {
        const isConnected = await checkSupabaseConnection();
        if (isConnected) {
          lastSuccessfulRequest = Date.now();
          failedRequests = 0;
        } else {
          failedRequests++;
          console.warn(`Supabase connectivity check failed (${failedRequests} consecutive failures)`);
          
          if (failedRequests > 3) {
            toast.error("Problemas de conexão com o servidor detectados", { 
              id: "connectivity-issues",
              duration: 5000
            });
          }
        }
      } catch (e) {
        failedRequests++;
        console.warn(`Supabase connectivity check error (${failedRequests} consecutive failures):`, e);
      }
    }
  }, 30000); // Check every 30 seconds
};

// Start monitoring connectivity
monitorConnectivity();

// Função de retry para consultas Supabase
export const retryOperation = async <T>(
  operation: () => Promise<T>,
  maxAttempts = 3,
  delay = 1000
): Promise<T> => {
  let attempts = 0;
  let lastError: any;

  while (attempts < maxAttempts) {
    try {
      attempts++;
      return await operation();
    } catch (error) {
      console.warn(`Tentativa ${attempts}/${maxAttempts} falhou:`, error);
      lastError = error;
      
      if (attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, delay));
        delay = Math.min(delay * 2, 10000); // Exponential backoff
      }
    }
  }
  
  throw lastError;
};
